!function (t) {
	t.gridmanager = function (o, e) {
		var s = this;
		s.$el = t(o), s.el = o, s.$el.data("gridmanager", s), s.appendHTMLSelectedCols = function (o) {
			var e = s.$el.find("#" + s.options.canvasId), n = e.find(s.options.colSelector);
			t.each(n, function () {
				t(this).hasClass(s.options.gmEditClassSelected) && t("." + s.options.gmEditRegion, this).append(o)
			})
		}, s.init = function () {
			s.options = t.extend({}, t.gridmanager.defaultOptions, e), s.log("INIT"), s.addCSS(s.options.cssInclude), s.rteControl("init"), s.createCanvas(), s.createControls(), s.initControls(), s.initDefaultButtons(), s.initCanvas(), s.log("FINISHED")
		}, s.createCanvas = function () {
			s.log("+ Create Canvas");
			var o = s.$el.html();
			s.$el.html(""), t("<div/>", {
				id: s.options.canvasId,
				html: o
			}).appendTo(s.$el), s.options.addResponsiveClasses && s.addResponsiveness(s.$el.find("#" + s.options.canvasId)), s.options.autoEdit && s.initMarkup(s.$el.find("#" + s.options.canvasId).find("." + s.options.colClass).not("." + s.options.rowClass))
		}, s.initMarkup = function (o) {
			var e = "<!--" + s.options.gmEditRegion + "-->", n = "<!--/" + s.options.gmEditRegion + "-->";
			t.each(o, function (o, a) {
				var l = !1, i = t(a).children().hasClass(s.options.rowClass);
				t.each(t(a).contents(), function (o, e) {
					8 === t(e)[0].nodeType && (l = !0)
				}), l || (i ? t.each(t(a).contents(), function (o, a) {
					if (t(a).hasClass(s.options.rowClass)) {
						var l = Array.prototype.reverse.call(t(a).prevUntil("." + s.options.rowClass)),
							i = t(a).nextUntil("." + s.options.rowClass);
						t(l).hasClass(s.options.gmEditRegion) || t(l).first().before(e).end().last().after(n), t(i).hasClass(s.options.gmEditRegion) || t(i).first().before(e).end().last().after(n)
					}
				}) : 0 !== t(a).contents().length && t(a).html(e + t(a).html() + n))
			}), s.log("initMarkup ran")
		}, s.initDefaultButtons = function () {
			s.options.colSelectEnabled && s.options.customControls.global_col.push({
				callback: s.selectColClick,
				loc: "top",
				iconClass: "fa fa-square-o",
				title: "Select Column"
			}), s.options.editableRegionEnabled && s.options.customControls.global_col.push({
				callback: s.addEditableAreaClick,
				loc: "top",
				iconClass: "fa fa-edit",
				title: "Add Editable Region"
			})
		}, s.addResponsiveness = function (o) {
			if ("" !== o) {
				var e = s.options.colDesktopClass + "(\\d+)", n = s.options.colTabletClass + "(\\d+)",
					a = s.options.colPhoneClass + "(\\d+)", l = new RegExp(e, "i"), i = new RegExp(n, "i"),
					c = new RegExp(a, "i");
				return t(o).find(":regex(class," + e + "|" + n + "|" + a + ")").each(function (o, e) {
					var n = t(this).attr("class"), a = 2, r = l.test(n), d = c.test(n), p = i.test(n);
					a = (a = l.exec(n)) ? a[1] : (a = i.exec(n)) ? a[1] : c.exec(n)[1], r || t(this).addClass(s.options.colDesktopClass + a), d || t(this).addClass(s.options.colPhoneClass + a), p || t(this).addClass(s.options.colTabletClass + a), s.options.addDefaultColumnClass && (t(this).hasClass(s.options.colClass) || t(this).addClass(s.options.colClass))
				})
			}
		}, s.createControls = function () {
			s.log("+ Create Controls");
			var o = [];
			t.each(s.options.controlButtons, function (t, e) {
				var n = s.generateButtonClass(e);
				o.push("<a title='Add Row " + n + "' class='" + s.options.controlButtonClass + " add" + n + "'><span class='" + s.options.controlButtonSpanClass + "'></span> " + n + "</a>"), s.generateClickHandler(e)
			}), s.$el.prepend(t("<div/>", {
				id: s.options.controlId,
				"class": s.options.gmClearClass
			}).prepend(t("<div/>", {"class": s.options.rowClass}).html(t("<div/>", {"class": s.options.colDesktopClass + s.options.colMax}).addClass(s.options.colAdditionalClass).html(t("<div/>", {id: "gm-addnew"}).addClass(s.options.gmBtnGroup).addClass(s.options.gmFloatLeft).html(o.join(""))).append(s.options.controlAppend))))
		}, s.addCSS = function (o) {
			"" !== o && t('<link rel="stylesheet" href="' + o + '">').appendTo("head")
		}, s.cleanSubstring = function (t, o, e) {
			return o.replace(new RegExp(t, "g"), e)
		}, s.switchLayoutMode = function (o) {
			var e = s.$el.find("#" + s.options.canvasId), n = e.html(), a = "", l = "", i = "";
			switch (n = s.cleanSubstring(s.options.classRenameSuffix, n, ""), i = t("div.gm-layout-mode > button > span"), o) {
				case 768:
					a = "(" + s.options.colDesktopClass + "\\d+)", l = "(" + s.options.colPhoneClass + "\\d+)", s.options.currentClassMode = s.options.colTabletClass, s.options.colSelector = s.options.colTabletSelector, t(i).attr("class", "fa fa-tablet").attr("title", "Tablet");
					break;
				case 640:
					a = "(" + s.options.colDesktopClass + "\\d+)", l = "(" + s.options.colTabletClass + "\\d+)", s.options.currentClassMode = s.options.colPhoneClass, s.options.colSelector = s.options.colPhoneSelector, t(i).attr("class", "fa fa-mobile-phone").attr("title", "Phone");
					break;
				default:
					a = "(" + s.options.colPhoneClass + "\\d+)", l = "(" + s.options.colTabletClass + "\\d+)", s.options.currentClassMode = s.options.colDesktopClass, s.options.colSelector = s.options.colDesktopSelector, t(i).attr("class", "fa fa-desktop").attr("title", "Desktop")
			}
			s.options.layoutDefaultMode = o, n = n.replace(new RegExp(a + '(?=[^"]*">)', "gm"), "$1" + s.options.classRenameSuffix), n = n.replace(new RegExp(l + '(?=[^"]*">)', "gm"), "$1" + s.options.classRenameSuffix), e.html(n)
		}, s.initControls = function () {
			var o = s.$el.find("#" + s.options.canvasId);
			s.log("+ InitControls Running"), s.$el.on("click", ".gm-preview", function () {
				s.status ? (s.deinitCanvas(), t(this).parent().find(".gm-edit-mode").prop("disabled", !0)) : (s.initCanvas(), t(this).parent().find(".gm-edit-mode").prop("disabled", !1)), t(this).toggleClass(s.options.gmDangerClass)
			}).on("click", ".gm-layout-mode a", function () {
				s.switchLayoutMode(t(this).data("width"))
			}).on("click", ".gm-edit-mode", function () {
				if ("visual" === s.mode) s.deinitCanvas(), o.html(t("<textarea/>").attr("cols", 130).attr("rows", 25).val(o.html())), s.mode = "html", t(this).parent().find(".gm-preview, .gm-layout-mode > button").prop("disabled", !0); else {
					var e = o.find("textarea").val();
					o.html(e), s.initCanvas(), s.mode = "visual", t(this).parent().find(".gm-preview, .gm-layout-mode > button").prop("disabled", !1)
				}
				t(this).toggleClass(s.options.gmDangerClass)
			}).on("click", "." + s.options.gmEditRegion + " ." + s.options.gmContentRegion, function () {
				t(this).attr("contenteditable") || (t(this).attr("contenteditable", !0), s.rteControl("attach", t(this)))
			}).on("click", "a.gm-save", function () {
				s.deinitCanvas(), s.saveremote()
			}).on("click", "a.gm-rowSettings", function () {
				var o = t(this).closest(s.options.rowSelector), e = o.find(".gm-rowSettingsDrawer");
				e.length > 0 ? e.remove() : o.prepend(s.generateRowSettings(o))
			}).on("blur", "input.gm-rowSettingsID", function () {
				var o = t(this).closest(s.options.rowSelector);
				o.attr("id", t(this).val())
			}).on("click", ".gm-toggleRowClass", function () {
				var o = t(this).closest(s.options.rowSelector), e = t(this).text().trim();
				o.toggleClass(e), o.hasClass(e) ? t(this).addClass(s.options.gmDangerClass) : t(this).removeClass(s.options.gmDangerClass)
			}).on("click", "a.gm-colSettings", function () {
				var o = t(this).closest(s.options.colSelector), e = o.find(".gm-colSettingsDrawer");
				e.length > 0 ? e.remove() : o.prepend(s.generateColSettings(o))
			}).on("blur", "input.gm-colSettingsID", function () {
				var o = t(this).closest(s.options.colSelector);
				o.attr("id", t(this).val())
			}).on("click", ".gm-togglecolClass", function () {
				var o = t(this).closest(s.options.colSelector), e = t(this).text().trim();
				o.toggleClass(e), o.hasClass(e) ? t(this).addClass(s.options.gmDangerClass) : t(this).removeClass(s.options.gmDangerClass)
			}).on("click", "a.gm-addColumn", function () {
				t(this).parent().after(s.createCol(2)), s.switchLayoutMode(s.options.layoutDefaultMode), s.reset()
			}).on("click", "a.gm-addRow", function () {
				s.log("Adding nested row"), t(this).closest("." + s.options.gmEditClass).append(t("<div>").addClass(s.options.rowClass).html(s.createCol(6)).append(s.createCol(6))), s.reset()
			}).on("click", "a.gm-colDecrease", function () {
				var o = t(this).closest("." + s.options.gmEditClass), e = s.getColClass(o);
				e.colWidth > parseInt(s.options.colResizeStep, 10) && (e.colWidth = parseInt(e.colWidth, 10) - parseInt(s.options.colResizeStep, 10), o.switchClass(e.colClass, s.options.currentClassMode + e.colWidth, 200))
			}).on("click", "a.gm-colIncrease", function () {
				var o = t(this).closest("." + s.options.gmEditClass), e = s.getColClass(o);
				e.colWidth < s.options.colMax && (e.colWidth = parseInt(e.colWidth, 10) + parseInt(s.options.colResizeStep, 10), o.switchClass(e.colClass, s.options.currentClassMode + e.colWidth, 200))
			}).on("click", "a.gm-resetgrid", function () {
				o.html(""), s.reset()
			}).on("click", "a.gm-removeCol", function () {
				t(this).closest("." + s.options.gmEditClass).animate({
					opacity: "hide",
					width: "hide",
					height: "hide"
				}, 400, function () {
					t(this).remove()
				}), s.log("Column Removed")
			}).on("click", "a.gm-removeRow", function () {
				s.log(t(this).closest("." + s.options.colSelector)), t(this).closest("." + s.options.gmEditClass).animate({
					opacity: "hide",
					height: "hide"
				}, 400, function () {
					t(this).remove()
				}), s.log("Row Removed")
			}).on("click", "a.gm-resetgrid, a.gm-remove, a.gm-removeRow, a.gm-save, button.gm-preview, a.gm-viewsource, a.gm-addColumn, a.gm-colDecrease, a.gm-colIncrease", function (o) {
				s.log("Clicked: " + t.grep(this.className.split(" "), function (t) {
						return 0 === t.indexOf("gm-")
					}).join()), o.preventDefault()
			})
		}, s.initGlobalCustomControls = function () {
			var o = s.$el.find("#" + s.options.canvasId), e = [], n = "";
			t.each(["row", "col"], function (a, l) {
				"undefined" != typeof s.options.customControls["global_" + l] && (e = o.find(s.options[l + "Selector"]), t.each(s.options.customControls["global_" + l], function (o, a) {
					"undefined" != typeof a.callback && ("undefined" == typeof a.loc && (a.loc = "top"), "undefined" == typeof a.iconClass && (a.iconClass = "fa fa-file-code-o"), "undefined" == typeof a.btnLabel && (a.btnLabel = ""), "undefined" == typeof a.title && (a.title = ""), n = "function" == typeof a.callback ? o + "_btn" : a.callback, btnObj = {
						element: "a",
						btnClass: "gm-" + n,
						iconClass: a.iconClass,
						btnLabel: a.btnLabel,
						title: a.title
					}, t.each(e, function (t, o) {
						s.setupCustomBtn(o, a.loc, "window", a.callback, btnObj)
					}))
				}))
			})
		}, s.initCustomControls = function () {
			var o = s.$el.find("#" + s.options.canvasId), e = "", n = "", a = "", l = "", i = {}, c = "", r = "";
			t("." + s.options.colClass + ":data, ." + s.options.rowClass + ":data", o).each(function () {
				for (prop in t(this).data())if (0 === prop.indexOf("gmButton")) {
					if (a = prop.replace("gmButton", ""), e = t(this).data()[prop].split("|"), 0 === e.length || "" === a)break;
					l = "undefined" != typeof e[3] ? e[3] : "top", c = "undefined" != typeof e[2] ? e[2] : "fa fa-file-code-o", r = "undefined" != typeof e[1] ? e[1] : "", n = e[0], i = {
						element: "a",
						btnClass: "gm-" + a,
						iconClass: c,
						btnLabel: r
					}, s.setupCustomBtn(this, l, n, a, i);
					break
				}
			})
		}, s.setupCustomBtn = function (o, e, n, a, l) {
			var i = null;
			if ("string" == typeof a) i = s.isValidCallback(n, a.toLowerCase()); else {
				if ("function" != typeof a)return !1;
				i = a
			}
			return e = "bottom" === e ? ":last" : ":first", t("." + s.options.gmToolClass + e, o).append(s.buttonFactory([l])).find(":last").on("click", function (t) {
				i(o, this), t.preventDefault()
			}), !0
		}, s.clearComments = function (o) {
			t(o, "#" + s.options.canvasId).contents().filter(function () {
				return 8 === this.nodeType
			}).remove()
		}, s.isValidCallback = function (t, o) {
			var e = null;
			if ("window" === t) {
				if ("function" != typeof window[o])return !1;
				e = window[o]
			} else {
				if ("function" != typeof window[t][o])return !1;
				e = window[t][o]
			}
			return e
		}, s.getColClass = function (o) {
			var e = t.grep(o.attr("class").split(" "), function (t) {
				return 0 === t.indexOf(s.options.currentClassMode)
			}).join(), n = e.replace(s.options.currentClassMode, "");
			return {colClass: e, colWidth: n}
		}, s.runFilter = function (t, o) {
			"function" == typeof s.options.filterCallback && s.options.filterCallback(t, o), s.options.editableRegionEnabled && s.editableAreaFilter(t, o)
		}, s.initCanvas = function () {
			var o = s.$el.find("#" + s.options.canvasId);
			s.switchLayoutMode(s.options.layoutDefaultMode);
			var e = o.find(s.options.colSelector), n = o.find(s.options.rowSelector);
			s.log("+ InitCanvas Running"), s.$el.find("#gm-addnew").show(), s.activateRows(n), s.activateCols(e), s.runFilter(o, !0), e = o.find(s.options.colSelector), n = o.find(s.options.rowSelector), o.sortable({
				items: n,
				axis: "y",
				placeholder: s.options.rowSortingClass,
				handle: ".gm-moveRow",
				forcePlaceholderSize: !0,
				opacity: .7,
				revert: !0,
				tolerance: "pointer",
				cursor: "move"
			}), t.each(n, function (o, e) {
				t(e).sortable({
					items: t(e).find(s.options.colSelector),
					axis: "x",
					handle: ".gm-moveCol",
					forcePlaceholderSize: !0,
					opacity: .7,
					revert: !0,
					tolerance: "pointer",
					containment: t(e),
					cursor: "move"
				})
			}), s.status = !0, s.mode = "visual", s.initCustomControls(), s.initGlobalCustomControls(), s.initNewContentElem()
		}, s.deinitCanvas = function () {
			var t = s.$el.find("#" + s.options.canvasId), o = t.find(s.options.colSelector),
				e = t.find(s.options.rowSelector);
			s.log("- deInitCanvas Running"), s.$el.find("#gm-addnew").hide(), s.deactivateRows(e), s.deactivateCols(o), s.cleanup(), s.runFilter(t, !1), s.status = !1
		}, s.saveremote = function () {
			var o = s.$el.find("#" + s.options.canvasId);
			t.ajax({type: "POST", url: s.options.remoteURL, data: {content: o.html()}}), s.log("Save Function Called")
		}, s.activateRows = function (t) {
			s.log("++ Activate Rows"), t.addClass(s.options.gmEditClass).prepend(s.toolFactory(s.options.rowButtonsPrepend)).append(s.toolFactory(s.options.rowButtonsAppend))
		}, s.deactivateRows = function (t) {
			s.log("-- DeActivate Rows"), t.removeClass(s.options.gmEditClass).removeClass("ui-sortable").removeAttr("style")
		}, s.createRow = function (o) {
			var e = t("<div/>", {"class": s.options.rowClass + " " + s.options.gmEditClass});
			return t.each(o, function (t, o) {
				e.append(s.createCol(o))
			}), s.log("++ Created Row"), e
		}, s.generateRowSettings = function (o) {
			var e = [];
			t.each(s.options.rowCustomClasses, function (n, a) {
				var l = t("<button/>").addClass("gm-toggleRowClass").addClass(s.options.controlButtonClass).append(t("<span/>").addClass(s.options.controlButtonSpanClass)).append(" " + a);
				o.hasClass(a) && l.addClass(s.options.gmDangerClass), e.push(l[0].outerHTML)
			});
			var n = t("<div/>").addClass("gm-rowSettingsDrawer").addClass(s.options.gmToolClass).addClass(s.options.gmClearClass).prepend(t("<div />").addClass(s.options.gmBtnGroup).addClass(s.options.gmFloatLeft).html(e.join(""))).append(t("<div />").addClass("pull-right").html(t("<label />").html("Row ID ").append(t("<input>").addClass("gm-rowSettingsID").attr({
				type: "text",
				placeholder: "Row ID",
				value: o.attr("id")
			}))));
			return n[0].outerHTML
		}, s.generateColSettings = function (o) {
			var e = [];
			t.each(s.options.colCustomClasses, function (n, a) {
				var l = t("<button/>").addClass("gm-togglecolClass").addClass(s.options.controlButtonClass).append(t("<span/>").addClass(s.options.controlButtonSpanClass)).append(" " + a);
				o.hasClass(a) && l.addClass(s.options.gmDangerClass), e.push(l[0].outerHTML)
			});
			var n = t("<div/>").addClass("gm-colSettingsDrawer").addClass(s.options.gmToolClass).addClass(s.options.gmClearClass).prepend(t("<div />").addClass(s.options.gmBtnGroup).addClass(s.options.gmFloatLeft).html(e.join(""))).append(t("<div />").addClass("pull-right").html(t("<label />").html("col ID ").append(t("<input>").addClass("gm-colSettingsID").attr({
				type: "text",
				placeholder: "col ID",
				value: o.attr("id")
			}))));
			return n[0].outerHTML
		}, s.activateCols = function (o) {
			o.addClass(s.options.gmEditClass), t.each(o, function (o, e) {
				t(e).prepend(s.toolFactory(s.options.colButtonsPrepend)), t(e).append(s.toolFactory(s.options.colButtonsAppend))
			}), s.log("++ Activate Cols Ran")
		}, s.deactivateCols = function (o) {
			o.removeClass(s.options.gmEditClass).removeClass(s.options.gmEditClassSelected).removeClass("ui-sortable"), t.each(o.children(), function (o, e) {
				t(e).hasClass(s.options.gmEditRegion) && ("" !== t(e).html() ? t(e).contents().unwrap() : t(e).remove())
			}), s.log("-- deActivate Cols Ran")
		}, s.createCol = function (o) {
			var e = t("<div/>").addClass(s.options.colClass).addClass(s.options.colDesktopClass + o).addClass(s.options.colTabletClass + o).addClass(s.options.colPhoneClass + o).addClass(s.options.gmEditClass).addClass(s.options.colAdditionalClass).html(s.toolFactory(s.options.colButtonsPrepend)).prepend(s.toolFactory(s.options.colButtonsPrepend)).append(s.toolFactory(s.options.colButtonsAppend));
			return s.log("++ Created Column " + o), e
		}, s.addEditableAreaClick = function (o, e) {
			var n = "<!--" + s.options.gmEditRegion + "-->", a = "<!--/" + s.options.gmEditRegion + "-->", l = null;
			t("." + s.options.gmToolClass + ":last", o).before(l = t("<div>").addClass(s.options.gmEditRegion + " " + s.options.contentDraggableClass).append(s.options.controlContentElem + '<div class="' + s.options.gmContentRegion + '"><p>New Content</p></div>')).before(a).prev().before(n), s.initNewContentElem(l)
		}, s.initNewContentElem = function (o) {
			var e = null;
			e = "undefined" == typeof o ? s.$el.find("." + s.options.colClass) : o.closest("." + s.options.colClass), t.each(e, function (o, e) {
				t(e).on("click", ".gm-delete", function (o) {
					t(this).closest("." + s.options.gmEditRegion).remove(), s.resetCommentTags(e), o.preventDefault()
				}), t(e).sortable({
					items: "." + s.options.contentDraggableClass,
					axis: "y",
					placeholder: s.options.rowSortingClass,
					handle: "." + s.options.controlMove,
					forcePlaceholderSize: !0,
					opacity: .7,
					revert: !0,
					tolerance: "pointer",
					cursor: "move",
					stop: function (o, e) {
						s.resetCommentTags(t(e.item).parent())
					}
				})
			})
		}, s.resetCommentTags = function (o) {
			var e = "<!--" + s.options.gmEditRegion + "-->", n = "<!--/" + s.options.gmEditRegion + "-->";
			s.clearComments(o), t("." + s.options.gmEditRegion, o).before(e).after(n)
		}, s.selectColClick = function (o, e) {
			t(e).toggleClass("fa fa-square-o fa fa-check-square-o"), t(e).hasClass("fa-check-square-o") ? t(o).addClass(s.options.gmEditClassSelected) : t(o).removeClass(s.options.gmEditClassSelected)
		}, s.editableAreaFilter = function (o, e) {
			if (e) {
				var n = "<!--" + s.options.gmEditRegion + "-->", a = "<!--/" + s.options.gmEditRegion + "-->",
					l = new RegExp("(?:" + n + ")\\s*([\\s\\S]+?)\\s*(?:" + a + ")", "g"), i = t(o).html(),
					c = n + '<div class="' + s.options.gmEditRegion + " " + s.options.contentDraggableClass + '">' + s.options.controlContentElem + '<div class="' + s.options.gmContentRegion + '">$1</div></div>' + a;
				i = i.replace(l, c), t(o).html(i), s.log("editableAreaFilter init ran")
			} else t("." + s.options.controlNestedEditable, o).remove(), t("." + s.options.gmContentRegion).contents().unwrap(), s.log("editableAreaFilter deinit ran")
		}, s.toolFactory = function (o) {
			var e = t("<div/>").addClass(s.options.gmToolClass).addClass(s.options.gmClearClass).html(s.buttonFactory(o));
			return e[0].outerHTML
		}, s.buttonFactory = function (o) {
			var e = [];
			return t.each(o, function (t, o) {
				o.btnLabel = "undefined" == typeof o.btnLabel ? "" : o.btnLabel, o.title = "undefined" == typeof o.title ? "" : o.title, e.push("<" + o.element + " title='" + o.title + "' class='" + o.btnClass + "'><span class='" + o.iconClass + "'></span>&nbsp;" + o.btnLabel + "</" + o.element + "> ")
			}), e.join("")
		}, s.generateButtonClass = function (o) {
			var e = "";
			return t.each(o, function (t, o) {
				e = e + "-" + o
			}), e
		}, s.generateClickHandler = function (t) {
			var o = "a.add" + s.generateButtonClass(t), e = s.$el.find("#" + s.options.canvasId);
			s.$el.on("click", o, function (n) {
				s.log("Clicked " + o), e.prepend(s.createRow(t)), s.reset(), n.preventDefault()
			})
		}, s.rteControl = function (o, e) {
			switch (s.log("RTE " + s.options.rte + " " + o), o) {
				case"init":
					"undefined" != typeof window.CKEDITOR && (s.options.rte = "ckeditor", s.log("++ CKEDITOR Found"), window.CKEDITOR.disableAutoInline = !0), "undefined" != typeof window.tinymce && (s.options.rte = "tinymce", s.log("++ TINYMCE Found"));
					break;
				case"attach":
					switch (s.options.rte) {
						case"tinymce":
							e.hasClass("mce-content-body") || e.tinymce(s.options.tinymce.config);
							break;
						case"ckeditor":
							t(e).ckeditor(s.options.ckeditor);
							break;
						default:
							s.log("No RTE specified for attach")
					}
					break;
				case"stop":
					switch (s.options.rte) {
						case"tinymce":
							window.tinymce.remove(), s.log("-- TinyMCE destroyed");
							break;
						case"ckeditor":
							for (var n in window.CKEDITOR.instances)window.CKEDITOR.instances[n].destroy();
							s.log("-- CKEDITOR destroyed");
							break;
						default:
							s.log("No RTE specified for stop")
					}
					break;
				default:
					s.log("No RTE Action specified")
			}
		}, s.reset = function () {
			s.log("~~RESET~~"), s.deinitCanvas(), s.initCanvas()
		}, s.cleanup = function () {
			var t, o;
			t = s.$el.find("#" + s.options.canvasId), o = "visual" !== s.mode ? t.find("textarea").val() : t.html(), t.html(s.cleanSubstring(s.options.classRenameSuffix, o, "")), t.find(s.options.colSelector).removeAttr("style").removeAttr("spellcheck").removeClass("mce-content-body").end().find("img").removeAttr("style").addClass("img-responsive").removeAttr("data-cke-saved-src").removeAttr("data-mce-src").end().find("." + s.options.gmToolClass).remove(), s.rteControl("stop"), s.log("~~Cleanup Ran~~")
		}, s.log = function (t) {
			s.options.debug && void 0 !== window.console && window.console.log(t)
		}, s.init()
	}, t.gridmanager.defaultOptions = {
		debug: 0,
		colSelectEnabled: !0,
		editableRegionEnabled: !0,
		autoEdit: !0,
		remoteURL: "/replace-with-your-url",
		cssInclude: "//maxcdn.bootstrapcdn.com/font-awesome/4.1.0/css/font-awesome.min.css",
		filterCallback: null,
		canvasId: "gm-canvas",
		controlId: "gm-controls",
		controlMove: "gm-move",
		controlNestedEditable: "gm-controls-element",
		controlButtons: [[12], [6, 6], [4, 4, 4], [3, 3, 3, 3], [2, 2, 2, 2, 2, 2], [2, 8, 2], [4, 8], [8, 4]],
		customControls: {global_row: [], global_col: []},
		controlButtonClass: "btn  btn-xs  btn-primary",
		controlButtonSpanClass: "fa fa-plus-circle",
		controlAppend: "<div class='btn-group pull-right'><button title='Edit Source Code' type='button' class='btn btn-xs btn-primary gm-edit-mode'><span class='fa fa-code'></span></button><button title='Preview' type='button' class='btn btn-xs btn-primary gm-preview'><span class='fa fa-eye'></span></button>     <div class='dropdown pull-left gm-layout-mode'><button type='button' class='btn btn-xs btn-primary dropdown-toggle' data-toggle='dropdown'><span class='caret'></span></button> <ul class='dropdown-menu' role='menu'><li><a data-width='auto' title='Desktop'><span class='fa fa-desktop'></span> Desktop</a></li><li><a title='Tablet' data-width='768'><span class='fa fa-tablet'></span> Tablet</a></li><li><a title='Phone' data-width='640'><span class='fa fa-mobile-phone'></span> Phone</a></li></ul></div>    <button type='button' class='btn  btn-xs  btn-primary dropdown-toggle' data-toggle='dropdown'><span class='caret'></span><span class='sr-only'>Toggle Dropdown</span></button><ul class='dropdown-menu' role='menu'><li><a title='Save'  href='#' class='gm-save'><span class='fa fa-save'></span> Save</a></li><li><a title='Reset Grid' href='#' class='gm-resetgrid'><span class='fa fa-trash-o'></span> Reset</a></li></ul></div>",
		controlContentElem: '<div class="gm-controls-element"> <a class="gm-move fa fa-arrows" href="#" title="Move"></a> <a class="gm-delete fa fa-times" href="#" title="Delete"></a> </div>',
		gmEditClass: "gm-editing",
		gmEditClassSelected: "gm-editing-selected",
		gmEditRegion: "gm-editable-region",
		gmContentRegion: "gm-content",
		gmToolClass: "gm-tools",
		gmClearClass: "clearfix",
		gmFloatLeft: "pull-left",
		gmFloatRight: "pull-right",
		gmBtnGroup: "btn-group",
		gmDangerClass: "btn-danger",
		rowClass: "row",
		rowSelector: "div.row",
		rowSortingClass: "alert-warning",
		rowButtonsPrepend: [{
			title: "Move",
			element: "a",
			btnClass: "gm-moveRow pull-left",
			iconClass: "fa fa-arrows "
		}, {
			title: "New Column",
			element: "a",
			btnClass: "gm-addColumn pull-left  ",
			iconClass: "fa fa-plus"
		}, {title: "Row Settings", element: "a", btnClass: "pull-right gm-rowSettings", iconClass: "fa fa-cog"}],
		rowButtonsAppend: [{
			title: "Remove row",
			element: "a",
			btnClass: "pull-right gm-removeRow",
			iconClass: "fa fa-trash-o"
		}],
		rowCustomClasses: ["example-class", "test-class"],
		colClass: "column",
		contentDraggableClass: "gm-content-draggable",
		addResponsiveClasses: !0,
		addDefaultColumnClass: !0,
		colDesktopClass: "col-md-",
		colTabletClass: "col-sm-",
		colPhoneClass: "col-xs-",
		colDesktopSelector: "div[class*=col-md-]",
		colTabletSelector: "div[class*=col-sm-]",
		colPhoneSelector: "div[class*=col-xs-]",
		classRenameSuffix: "-clsstmp",
		layoutDefaultMode: "auto",
		currentClassMode: "",
		colAdditionalClass: "",
		colButtonsPrepend: [{
			title: "Move",
			element: "a",
			btnClass: "gm-moveCol pull-left",
			iconClass: "fa fa-arrows "
		}, {
			title: "Column Settings",
			element: "a",
			btnClass: "pull-right gm-colSettings",
			iconClass: "fa fa-cog"
		}, {
			title: "Make Column Narrower",
			element: "a",
			btnClass: "gm-colDecrease pull-left",
			iconClass: "fa fa-minus"
		}, {title: "Make Column Wider", element: "a", btnClass: "gm-colIncrease pull-left", iconClass: "fa fa-plus"}],
		colButtonsAppend: [{
			title: "Add Nested Row",
			element: "a",
			btnClass: "pull-left gm-addRow",
			iconClass: "fa fa-plus-square"
		}, {title: "Remove Column", element: "a", btnClass: "pull-right gm-removeCol", iconClass: "fa fa-trash-o"}],
		colCustomClasses: ["example-col-class", "test-class"],
		colMax: 12,
		colResizeStep: 1,
		tinymce: {
			config: {
				inline: !0,
				plugins: ["advlist autolink lists link image charmap print preview anchor", "searchreplace visualblocks code fullscreen", "insertdatetime media table contextmenu paste"],
				toolbar: "insertfile undo redo | styleselect | bold italic | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | link image"
			}
		},
		ckeditor: {customConfig: ""}
	}, t.fn.gridmanager = function (o) {
		return this.each(function () {
			var e = t(this), s = new t.gridmanager(this, o);
			e.data("gridmanager", s)
		})
	}, t.expr[":"].regex = function (t, o, e) {
		var s = e[3].split(","), n = /^(data|css):/,
			a = {method: s[0].match(n) ? s[0].split(":")[0] : "attr", property: s.shift().replace(n, "")}, l = "ig",
			i = new RegExp(s.join("").replace(/^\s+|\s+$/g, ""), l);
		return i.test(jQuery(t)[a.method](a.property))
	}
}(jQuery);